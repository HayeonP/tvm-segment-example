2025-05-29 13:56:35 [INFO] [task_scheduler.cc:162] Initializing Task #6: "max_pool2d"
2025-05-29 13:56:35 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv3: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"op_pattern": 4, "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(114), T.int64(114)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(114), T.int64(114)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(lv3[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1)])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), lv3[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1)], T.float32(-340282346638528859811704183484516925440.0))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-340282346638528859811704183484516925440.0)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
2025-05-29 13:56:35 [INFO] [task_scheduler.cc:166] Total 2 design space(s) generated
2025-05-29 13:56:35 [INFO] [task_scheduler.cc:173] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv3: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"op_pattern": 4, "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(lv3[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-340282346638528859811704183484516925440.0)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), lv3[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-340282346638528859811704183484516925440.0)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
2025-05-29 13:56:35 [INFO] [task_scheduler.cc:173] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv3: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"op_pattern": 4, "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(200704), thread="blockIdx.x"):
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                            v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(4) + rv0_rv1_fused_1) // T.int64(3))
                            v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(4) + rv0_rv1_fused_1) % T.int64(3))
                            T.where(rv0_rv1_fused_0 * T.int64(4) + rv0_rv1_fused_1 < T.int64(9))
                            T.reads(lv3[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-340282346638528859811704183484516925440.0)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), lv3[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-340282346638528859811704183484516925440.0)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=0)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
2025-05-29 14:03:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-05-29 14:03:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-05-29 14:03:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x22353ce8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21e76a68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219c53d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21eca5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21be5f68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x219c5948)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21e768f8)]: 0 failure(s)
2025-05-29 14:03:15 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2025-05-29 14:03:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x22353ce8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21e76a68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219c53d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21eca5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21be5f68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x219c5948)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21e768f8)]: 0 failure(s)
2025-05-29 14:03:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x22353ce8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21e76a68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219c53d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21eca5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21be5f68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x219c5948)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21e768f8)]: 0 failure(s)
2025-05-29 14:03:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x22353ce8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21e76a68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219c53d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21eca5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21be5f68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x219c5948)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21e768f8)]: 0 failure(s)
2025-05-29 14:03:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x22353ce8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21e76a68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219c53d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21eca5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21be5f68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x219c5948)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21e768f8)]: 0 failure(s)
2025-05-29 14:03:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.4296  0.3882  0.3880  0.3836  0.3556  0.3152  0.3147  0.2987  0.2804  0.2738  0.2062  0.1956  0.1909  0.1909  0.1909  0.1909
[17 : 32]:	0.1902  0.1884  0.1877  0.1863  0.1858  0.1822  0.1802  0.1757  0.1757  0.1738  0.1723  0.1711  0.1701  0.1678  0.1678  0.1673
[33 : 48]:	0.1638  0.1637  0.1626  0.1625  0.1616  0.1592  0.1572  0.1572  0.1567  0.1567  0.1567  0.1567  0.1526  0.1516  0.1493  0.1481
[49 : 64]:	0.1471  0.1446  0.1422  0.1422  0.1422  0.1422  0.1361  0.1361  0.1333  0.1300  0.1243  0.1199  0.1199  0.1158  0.1085  0.1085
2025-05-29 14:03:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-05-29 14:03:36 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #1: GFLOPs: 8.4541. Time: 213.6639 us. Best GFLOPs: 8.4541
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #2: GFLOPs: 8.4606. Time: 213.5004 us. Best GFLOPs: 8.4606
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #3: GFLOPs: 9.3362. Time: 193.4775 us. Best GFLOPs: 9.3362
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #4: GFLOPs: 9.3428. Time: 193.3406 us. Best GFLOPs: 9.3428
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #5: GFLOPs: 7.5626. Time: 238.8504 us. Best GFLOPs: 9.3428
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #6: GFLOPs: 8.8945. Time: 203.0838 us. Best GFLOPs: 9.3428
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #7: GFLOPs: 8.9091. Time: 202.7512 us. Best GFLOPs: 9.3428
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #8: GFLOPs: 8.9108. Time: 202.7120 us. Best GFLOPs: 9.3428
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #9: GFLOPs: 8.4256. Time: 214.3867 us. Best GFLOPs: 9.3428
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #10: GFLOPs: 8.9168. Time: 202.5769 us. Best GFLOPs: 9.3428
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #11: GFLOPs: 10.2062. Time: 176.9834 us. Best GFLOPs: 10.2062
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #12: GFLOPs: 8.9656. Time: 201.4743 us. Best GFLOPs: 10.2062
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #13: GFLOPs: 1.6178. Time: 1116.5226 us. Best GFLOPs: 10.2062
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #14: GFLOPs: 1.6172. Time: 1116.9244 us. Best GFLOPs: 10.2062
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #15: GFLOPs: 1.6113. Time: 1121.0633 us. Best GFLOPs: 10.2062
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #16: GFLOPs: 1.6200. Time: 1115.0449 us. Best GFLOPs: 10.2062
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #17: GFLOPs: 439.5107. Time: 4.1099 us. Best GFLOPs: 439.5107
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #18: GFLOPs: 404.1085. Time: 4.4699 us. Best GFLOPs: 439.5107
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #19: GFLOPs: 8.7553. Time: 206.3129 us. Best GFLOPs: 439.5107
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #20: GFLOPs: 10.1655. Time: 177.6932 us. Best GFLOPs: 439.5107
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #21: GFLOPs: 10.1681. Time: 177.6478 us. Best GFLOPs: 439.5107
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #22: GFLOPs: 388.2944. Time: 4.6520 us. Best GFLOPs: 439.5107
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #23: GFLOPs: 252.3290. Time: 7.1587 us. Best GFLOPs: 439.5107
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #24: GFLOPs: 8.8921. Time: 203.1399 us. Best GFLOPs: 439.5107
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #25: GFLOPs: 442.6868. Time: 4.0804 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #26: GFLOPs: 401.3272. Time: 4.5009 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #27: GFLOPs: 8.8826. Time: 203.3574 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #28: GFLOPs: 388.3087. Time: 4.6518 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #29: GFLOPs: 386.2900. Time: 4.6761 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #30: GFLOPs: 8.7563. Time: 206.2902 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #31: GFLOPs: 10.1686. Time: 177.6378 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #32: GFLOPs: 8.7607. Time: 206.1871 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #33: GFLOPs: 254.9754. Time: 7.0844 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #34: GFLOPs: 10.1469. Time: 178.0176 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #35: GFLOPs: 401.2899. Time: 4.5013 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #36: GFLOPs: 8.7556. Time: 206.3070 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #37: GFLOPs: 401.3917. Time: 4.5002 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #38: GFLOPs: 387.3196. Time: 4.6637 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #39: GFLOPs: 8.9008. Time: 202.9408 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #40: GFLOPs: 8.8811. Time: 203.3905 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #41: GFLOPs: 7.2228. Time: 250.0874 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #42: GFLOPs: 7.2370. Time: 249.5982 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #43: GFLOPs: 7.2375. Time: 249.5815 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #44: GFLOPs: 7.2062. Time: 250.6649 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #45: GFLOPs: 254.7131. Time: 7.0916 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #46: GFLOPs: 254.8053. Time: 7.0891 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #47: GFLOPs: 8.7537. Time: 206.3503 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #48: GFLOPs: 390.2293. Time: 4.6289 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #49: GFLOPs: 389.5446. Time: 4.6370 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #50: GFLOPs: 7.2098. Time: 250.5387 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #51: GFLOPs: 3.4690. Time: 520.7046 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #52: GFLOPs: 3.4561. Time: 522.6565 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #53: GFLOPs: 3.4547. Time: 522.8649 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #54: GFLOPs: 3.4676. Time: 520.9154 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #55: GFLOPs: 304.8702. Time: 5.9249 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #56: GFLOPs: 425.1769. Time: 4.2484 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #57: GFLOPs: 1.6082. Time: 1123.2168 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #58: GFLOPs: 3.4681. Time: 520.8441 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #59: GFLOPs: 386.1160. Time: 4.6782 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #60: GFLOPs: 369.4350. Time: 4.8895 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #61: GFLOPs: 278.4026. Time: 6.4882 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #62: GFLOPs: 370.2591. Time: 4.8786 us. Best GFLOPs: 442.6868
2025-05-29 14:03:51 [INFO] [task_scheduler.cc:131] [Task #6: max_pool2d] Trial #63: GFLOPs: 386.3956. Time: 4.6748 us. Best GFLOPs: 442.6868
