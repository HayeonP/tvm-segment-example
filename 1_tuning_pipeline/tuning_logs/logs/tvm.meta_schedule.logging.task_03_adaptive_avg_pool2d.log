2025-05-29 13:56:34 [INFO] [task_scheduler.cc:162] Initializing Task #3: "adaptive_avg_pool2d"
2025-05-29 13:56:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv85: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"op_pattern": 4, "tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0.0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2025-05-29 13:56:34 [INFO] [task_scheduler.cc:166] Total 2 design space(s) generated
2025-05-29 13:56:34 [INFO] [task_scheduler.cc:173] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv85: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"op_pattern": 4, "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0.0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2025-05-29 13:56:34 [INFO] [task_scheduler.cc:173] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv85: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"op_pattern": 4, "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(512), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0.0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(16)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2025-05-29 13:59:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-05-29 13:59:18 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-05-29 13:59:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x221ff5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21ef2be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21a57588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21e640f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217fc518)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b746a8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x219c5da8)]: 0 failure(s)
2025-05-29 13:59:19 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2025-05-29 13:59:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x221ff5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21ef2be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21a57588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21e640f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217fc518)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b746a8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x219c5da8)]: 0 failure(s)
2025-05-29 13:59:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x221ff5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21ef2be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21a57588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21e640f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217fc518)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b746a8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x219c5da8)]: 0 failure(s)
2025-05-29 13:59:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x221ff5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21ef2be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21a57588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21e640f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217fc518)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b746a8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x219c5da8)]: 0 failure(s)
2025-05-29 13:59:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x221ff5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21ef2be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21a57588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21e640f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217fc518)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b746a8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x219c5da8)]: 0 failure(s)
2025-05-29 13:59:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2507  1.2507  1.2507  1.2507  1.2164  1.1813  1.1813  1.1813  1.1813  1.1813  1.1813  1.1813  1.1813  1.1813  1.1813  1.1813
[17 : 32]:	1.1813  1.1729  1.1729  1.1729  1.1729  1.1729  1.1729  1.1729  1.1729  1.1690  1.1690  1.1690  1.1690  1.1630  1.1630  1.1630
[33 : 48]:	1.1630  1.1586  1.1586  1.1586  1.1586  1.1586  1.1586  1.1586  1.1586  1.1586  1.1586  1.1586  1.1586  1.1491  1.1491  1.1491
[49 : 64]:	1.1491  1.1491  1.1491  1.1491  1.1491  1.1491  1.1491  1.1491  1.1491  1.1472  1.1472  1.1472  1.1472  1.1472  1.1472  1.1472
2025-05-29 13:59:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-05-29 13:59:24 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:121] [Task #3: adaptive_avg_pool2d] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv85: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"op_pattern": 4, "tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0.0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:121] [Task #3: adaptive_avg_pool2d] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv85: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"op_pattern": 4, "tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0.0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:121] [Task #3: adaptive_avg_pool2d] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv85: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"op_pattern": 4, "tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0.0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:121] [Task #3: adaptive_avg_pool2d] Trial #4: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv85: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"op_pattern": 4, "tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0.0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + lv85[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #5: GFLOPs: 6.5964. Time: 3.8809 us. Best GFLOPs: 6.5964
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #6: GFLOPs: 7.1021. Time: 3.6046 us. Best GFLOPs: 7.1021
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #7: GFLOPs: 7.0718. Time: 3.6200 us. Best GFLOPs: 7.1021
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #8: GFLOPs: 7.2252. Time: 3.5431 us. Best GFLOPs: 7.2252
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #9: GFLOPs: 7.2317. Time: 3.5400 us. Best GFLOPs: 7.2317
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #10: GFLOPs: 7.2607. Time: 3.5258 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #11: GFLOPs: 7.2531. Time: 3.5295 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #12: GFLOPs: 7.2493. Time: 3.5314 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #13: GFLOPs: 7.0693. Time: 3.6213 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #14: GFLOPs: 7.0997. Time: 3.6058 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #15: GFLOPs: 7.2441. Time: 3.5339 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #16: GFLOPs: 7.0812. Time: 3.6152 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #17: GFLOPs: 7.1087. Time: 3.6012 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #18: GFLOPs: 7.2560. Time: 3.5281 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #19: GFLOPs: 7.0837. Time: 3.6139 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #20: GFLOPs: 7.2434. Time: 3.5342 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #21: GFLOPs: 6.2640. Time: 4.0869 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #22: GFLOPs: 6.1386. Time: 4.1703 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #23: GFLOPs: 7.1118. Time: 3.5996 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #24: GFLOPs: 6.2689. Time: 4.0836 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #25: GFLOPs: 6.1587. Time: 4.1568 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #26: GFLOPs: 3.4111. Time: 7.5049 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #27: GFLOPs: 3.4095. Time: 7.5085 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #28: GFLOPs: 3.3748. Time: 7.5855 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #29: GFLOPs: 3.4031. Time: 7.5226 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #30: GFLOPs: 4.8620. Time: 5.2653 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #31: GFLOPs: 4.9413. Time: 5.1809 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #32: GFLOPs: 4.9201. Time: 5.2031 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #33: GFLOPs: 4.9329. Time: 5.1897 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #34: GFLOPs: 6.2696. Time: 4.0832 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #35: GFLOPs: 6.1591. Time: 4.1564 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #36: GFLOPs: 6.1431. Time: 4.1673 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #37: GFLOPs: 6.1474. Time: 4.1644 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #38: GFLOPs: 6.2744. Time: 4.0801 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #39: GFLOPs: 4.6184. Time: 5.5430 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #40: GFLOPs: 6.2581. Time: 4.0907 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #41: GFLOPs: 6.1579. Time: 4.1573 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #42: GFLOPs: 6.1411. Time: 4.1686 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #43: GFLOPs: 6.2599. Time: 4.0895 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #44: GFLOPs: 6.1638. Time: 4.1533 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #45: GFLOPs: 6.2587. Time: 4.0903 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #46: GFLOPs: 3.9758. Time: 6.4390 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #47: GFLOPs: 4.9282. Time: 5.1946 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #48: GFLOPs: 4.8623. Time: 5.2650 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #49: GFLOPs: 4.9334. Time: 5.1892 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #50: GFLOPs: 4.8695. Time: 5.2572 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #51: GFLOPs: 4.9340. Time: 5.1884 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #52: GFLOPs: 4.9428. Time: 5.1792 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #53: GFLOPs: 4.9328. Time: 5.1898 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #54: GFLOPs: 4.8628. Time: 5.2645 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #55: GFLOPs: 4.9162. Time: 5.2073 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #56: GFLOPs: 4.9339. Time: 5.1886 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #57: GFLOPs: 4.9214. Time: 5.2018 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #58: GFLOPs: 3.4121. Time: 7.5026 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #59: GFLOPs: 3.4013. Time: 7.5266 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #60: GFLOPs: 3.4054. Time: 7.5175 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #61: GFLOPs: 3.3781. Time: 7.5781 us. Best GFLOPs: 7.2607
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #62: GFLOPs: 13.0960. Time: 1.9548 us. Best GFLOPs: 13.0960
2025-05-29 13:59:41 [INFO] [task_scheduler.cc:131] [Task #3: adaptive_avg_pool2d] Trial #63: GFLOPs: 12.2387. Time: 2.0917 us. Best GFLOPs: 13.0960
