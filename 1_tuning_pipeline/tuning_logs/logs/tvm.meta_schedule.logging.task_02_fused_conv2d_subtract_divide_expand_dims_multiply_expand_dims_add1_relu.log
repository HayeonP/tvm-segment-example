2025-05-29 13:56:34 [INFO] [task_scheduler.cc:162] Initializing Task #2: "fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu"
2025-05-29 13:56:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)))
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        T_subtract_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        T_divide_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        expand_dims_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)))
        T_multiply_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        expand_dims_intermediate_1 = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)))
        T_add_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(3), T.int64(230), T.int64(230)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(x[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3)])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), x[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3)], T.float32(0.0))
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(64), T.int64(112), T.int64(112), T.int64(3), T.int64(7), T.int64(7)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw_intermediate[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw_intermediate[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                conv2d_nchw_intermediate[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(112), T.int64(112)):
            with T.block("T_subtract"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_subtract_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                T_subtract_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(112), T.int64(112)):
            with T.block("T_divide"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_subtract_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_divide_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                T_divide_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T_subtract_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("expand_dims"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p_bn1_weight[v_i1])
                T.writes(expand_dims_intermediate[v_i0, v_i1, v_i2, v_i3])
                expand_dims_intermediate[v_i0, v_i1, v_i2, v_i3] = p_bn1_weight[v_i1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(112), T.int64(112)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_divide_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], expand_dims_intermediate[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T_divide_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] * expand_dims_intermediate[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("expand_dims_1"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p_bn1_bias[v_i1])
                T.writes(expand_dims_intermediate_1[v_i0, v_i1, v_i2, v_i3])
                expand_dims_intermediate_1[v_i0, v_i1, v_i2, v_i3] = p_bn1_bias[v_i1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(112), T.int64(112)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], expand_dims_intermediate_1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] + expand_dims_intermediate_1[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(112), T.int64(112)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(T_add_intermediate[v_i0, v_i1, v_i2, v_i3])
                T.writes(compute_intermediate[v_i0, v_i1, v_i2, v_i3])
                compute_intermediate[v_i0, v_i1, v_i2, v_i3] = T.max(T_add_intermediate[v_i0, v_i1, v_i2, v_i3], T.float32(0.0))
2025-05-29 13:56:34 [INFO] [task_scheduler.cc:166] Total 3 design space(s) generated
2025-05-29 13:56:34 [INFO] [task_scheduler.cc:173] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
            conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
            p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(25419)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), ax0_ax1_ax2_ax3_fused % T.int64(25419) // T.int64(111))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(112) + rx_0 + ax0_ax1_ax2_ax3_fused % T.int64(111))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(448)):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(7))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), rx_0)
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(56) + yy_3 * T.int64(8) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                                    conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(2)):
                            with T.block("conv2d_nchw_intermediate_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(56) + ax2)
                                v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                                conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                        with T.block("T_add"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                            v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                            v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                            T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                            T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                            T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                            compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 4, 2, 2, 4])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 8])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 7, 4, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
2025-05-29 13:56:34 [INFO] [task_scheduler.cc:173] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
            conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
            p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(21), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(25419)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0_ry_0_rx_0_fused // T.int64(7), T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), ax0_ax1_ax2_ax3_fused % T.int64(25419) // T.int64(111))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(112) + rc_0_ry_0_rx_0_fused % T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(111))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(448)):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(7))
                                    v1 = T.axis.spatial(T.int64(3), rc_0_ry_0_rx_0_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(56) + yy_3 * T.int64(8) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(3), rc_0_ry_0_rx_0_fused // T.int64(7) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7) + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                                    conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(2)):
                            with T.block("conv2d_nchw_intermediate_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(56) + ax2)
                                v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                                conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                        with T.block("T_add"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                            v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                            v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                            T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                            T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                            T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                            compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 4, 2, 2, 4])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 8])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 7, 4, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
l105 = sch.fuse(l60, l66, l72, preserve_unit_iters=True)
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v106 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v106)
l107, l108, l109, l110 = sch.get_loops(block=b7)
l111 = sch.fuse(l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113, l114 = sch.split(loop=l111, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l113, l114, l112)
sch.bind(loop=l113, thread_axis="blockIdx.x")
sch.bind(loop=l114, thread_axis="threadIdx.x")
2025-05-29 13:56:34 [INFO] [task_scheduler.cc:173] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
            conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
            p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(21), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(25419)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0_ry_0_rx_0_fused // T.int64(7), T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), ax0_ax1_ax2_ax3_fused % T.int64(25419) // T.int64(111))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(112) + rc_0_ry_0_rx_0_fused % T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(111))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(448)):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(7))
                                    v1 = T.axis.spatial(T.int64(3), rc_0_ry_0_rx_0_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(56) + yy_3 * T.int64(8) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(3), rc_0_ry_0_rx_0_fused // T.int64(7) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7) + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                                    conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(2)):
                            with T.block("conv2d_nchw_intermediate_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(56) + ax2)
                                v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                                conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                        with T.block("T_add"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                            v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                            v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                            T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                            T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                            T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                            compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 4, 2, 2, 4])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 8])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 7, 4, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
l105 = sch.fuse(l60, l66, l72, preserve_unit_iters=True)
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v106 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v106)
l107, l108, l109, l110 = sch.get_loops(block=b7)
l111 = sch.fuse(l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113, l114 = sch.split(loop=l111, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l113, l114, l112)
sch.bind(loop=l113, thread_axis="blockIdx.x")
sch.bind(loop=l114, thread_axis="threadIdx.x")
2025-05-29 13:57:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-05-29 13:57:20 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-05-29 13:57:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x217db0c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21fb58c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21ec5bb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x218d3f48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21a55ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b35b58)]: 495 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21fb5758)]: 0 failure(s)
2025-05-29 13:57:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x217db0c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21fb58c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21ec5bb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x218d3f48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21a55ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b35b58)]: 986 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21fb5758)]: 0 failure(s)
2025-05-29 13:57:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x217db0c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21fb58c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21ec5bb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x218d3f48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21a55ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b35b58)]: 1480 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21fb5758)]: 0 failure(s)
2025-05-29 13:57:37 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2025-05-29 13:57:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x217db0c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21fb58c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21ec5bb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x218d3f48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21a55ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b35b58)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21fb5758)]: 0 failure(s)
2025-05-29 13:58:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x217db0c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21fb58c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21ec5bb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x218d3f48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21a55ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b35b58)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21fb5758)]: 0 failure(s)
2025-05-29 13:58:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x217db0c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21fb58c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21ec5bb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x218d3f48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21a55ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b35b58)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21fb5758)]: 0 failure(s)
2025-05-29 13:58:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x217db0c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21fb58c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x21ec5bb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x218d3f48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x21a55ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21b35b58)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21fb5758)]: 0 failure(s)
2025-05-29 13:58:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9974  0.9972  0.9966  0.9957  0.9930  0.9920  0.9918  0.9916  0.9909  0.9907  0.9898  0.9889  0.9886  0.9885  0.9883
[17 : 32]:	0.9881  0.9880  0.9864  0.9860  0.9858  0.9848  0.9846  0.9840  0.9834  0.9831  0.9830  0.9821  0.9820  0.9819  0.9781  0.9776
[33 : 48]:	0.9764  0.9761  0.9748  0.9747  0.9740  0.9729  0.9724  0.9707  0.9694  0.9686  0.9686  0.9683  0.9677  0.9676  0.9664  0.9663
[49 : 64]:	0.9659  0.9658  0.9654  0.9639  0.9637  0.9630  0.9629  0.9616  0.9614  0.9598  0.9575  0.9574  0.9573  0.9563  0.9556  0.9544
2025-05-29 13:58:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-05-29 13:58:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:131] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #1: GFLOPs: 1032.2385. Time: 232.5451 us. Best GFLOPs: 1032.2385
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
                         ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
                     ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/module.py", line 405, in evaluator
    blob = feval(*args)
           ^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc", line 881, in operator()
    DeviceAPI::Get(dev)->StreamSync(dev, nullptr);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248, in tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
    CUDA_CALL(cudaStreamSynchronize(static_cast<cudaStream_t>(stream)));
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: operator()
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc:881
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:248
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(8) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(151)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(229))
                                    v3 = T.axis.spatial(T.int64(230), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(229))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4809))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(49))
                                        v1 = T.axis.spatial(T.int64(3), rc_0)
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3136))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(8) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(14)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 4, 2, 8, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[14, 2, 4, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 2, 4, 7, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 32, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(128), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(64) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(64) // T.int64(8) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(93)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(10323) // T.int64(3441))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3441) // T.int64(111))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(111))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(10323))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v2, v3 = T.axis.remap("SS", [ry_0, rx_0])
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(192))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(64) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(64) // T.int64(8) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(64) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(64) // T.int64(8) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 8, 4, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[7, 8, 2, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 8, 7, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(7) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(297)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9477) // T.int64(3159))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3159) // T.int64(27))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(28) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(27))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(9477))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(7) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(7) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 4, 16, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 4, 2, 1, 7])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[8, 7, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 32, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #5: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1024), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3_init * T.int64(4) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(137)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2223))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2223) // T.int64(117))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(117))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6669))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(147))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(147) // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[32, 2, 1, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[16, 1, 7, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 49], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 49], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #6: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(8) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(23)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8991) // T.int64(2997))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(112) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2997) // T.int64(27))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(28) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(27))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(8991))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v2, v3 = T.axis.remap("SS", [ry_0, rx_0])
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(192))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 1, 8, 4, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 4, 7, 1, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[8, 1, 7, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 392], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 392, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #7: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(8) + yy_3_init * T.int64(8) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(4) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(148)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(223))
                                    v3 = T.axis.spatial(T.int64(230), rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(223))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(8251))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(7))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), rx_0)
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(8) + yy_3 * T.int64(8) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(4)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 16, 2, 2, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 8])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 2, 14, 2, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #8: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(224), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(4) * T.int64(4) + yy_3_init * T.int64(4) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(56) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2035) // T.int64(37))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(37))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2035))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(7))
                                    v1, v2 = T.axis.remap("SS", [rc_0, ry_0])
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(56))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(4) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(4) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[8, 1, 4, 2, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[4, 1, 7, 1, 4])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[7, 4, 4, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #9: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(151)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(229))
                                    v3 = T.axis.spatial(T.int64(230), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(229))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4809))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(49))
                                        v1 = T.axis.spatial(T.int64(3), rc_0)
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3136))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 1, 32, 2, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[14, 1, 1, 4, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 4, 1, 28, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 32, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #10: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
                         ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
                     ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/module.py", line 405, in evaluator
    blob = feval(*args)
           ^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc", line 881, in operator()
    DeviceAPI::Get(dev)->StreamSync(dev, nullptr);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248, in tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
    CUDA_CALL(cudaStreamSynchronize(static_cast<cudaStream_t>(stream)));
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: operator()
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc:881
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:248
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(28) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(34)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2899))
                                    v2 = T.axis.spatial(T.int64(230), ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2899) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(8697))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), ry_0)
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(28) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 16, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[1, 1, 4, 2, 14])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[28, 1, 4, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 256], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 256, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #11: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(128), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(196) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(196) // T.int64(14) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(61))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(61))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(7137))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(196))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(196) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(196) // T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(196) // T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[16, 2, 2, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 2, 14, 2, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[4, 1, 14, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 392], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 392], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #12: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(17)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1891) // T.int64(31))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(32) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(31))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1891))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(3), rc_0)
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 1, 1, 32, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[4, 1, 28, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[7, 4, 4, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 112, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #13: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(512), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + xx_3_init * T.int64(4) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(45)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) // T.int64(229))
                                    v3 = T.axis.spatial(T.int64(230), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) % T.int64(229))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4351))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + xx_3 * T.int64(4) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[32, 1, 2, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[16, 1, 7, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 2, 7, 2, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 98], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 98], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #14: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(256), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(128) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(8) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(128) // T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(23)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1287) // T.int64(429))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(128) // T.int64(8) * T.int64(14) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(429) // T.int64(33))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(33))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1287))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(128) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), ry_0)
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(128) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(128) // T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(128) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(128) // T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 1, 4, 2, 4])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[16, 1, 7, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[8, 7, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 56, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #15: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(68)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4329) // T.int64(1443))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(112) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1443) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4329))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), ry_0)
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(4)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 16, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 1, 4, 1, 14])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[28, 1, 1, 4, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:131] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #16: GFLOPs: 264.3904. Time: 907.9074 us. Best GFLOPs: 1032.2385
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:131] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #17: GFLOPs: 213.3891. Time: 1124.9029 us. Best GFLOPs: 1032.2385
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:131] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #18: GFLOPs: 2293.8323. Time: 104.6467 us. Best GFLOPs: 2293.8323
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #19: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
                         ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
                     ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/module.py", line 405, in evaluator
    blob = feval(*args)
           ^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc", line 881, in operator()
    DeviceAPI::Get(dev)->StreamSync(dev, nullptr);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248, in tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
    CUDA_CALL(cudaStreamSynchronize(static_cast<cudaStream_t>(stream)));
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: operator()
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc:881
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:248
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(16) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) * T.int64(4) + yy_3_init * T.int64(4) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(15)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(3), rc_0)
                                        v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2457))
                                        T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(49))
                                        v1 = T.axis.spatial(T.int64(3), rc_0)
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 2, 8, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 4])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[14, 2, 2, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122, l123 = sch.split(loop=l120, factors=[None, 56, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l123)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b92)
l131, l132, l133 = sch.split(loop=l130, factors=[None, 56, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l133)
sch.bind(loop=l132, thread_axis="threadIdx.x")
b134 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b134, ann_key="meta_schedule.unroll_explicit")
b135, b136, b137, b138, b139 = sch.get_child_blocks(b134)
l140, l141, l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b135)
l149, l150, l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b136)
l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b137)
sch.annotate(block_or_loop=l158, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l158, ann_key="pragma_unroll_explicit", ann_val=1)
l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b138)
l185, l186, l187 = sch.get_loops(block=b139)
b188 = sch.get_block(name="conv2d_nchw", func_name="main")
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b188)
b209 = sch.decompose_reduction(block=b188, loop=l192)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #20: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(896), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(56) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) * T.int64(8) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(351))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(56) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(351) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(4) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1053))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(56) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) * T.int64(8) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(56) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[8, 1, 4, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 1, 7, 8, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[56, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 56, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #21: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(24)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2977) // T.int64(229))
                                    v3 = T.axis.spatial(T.int64(230), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(229))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2977))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1, v2 = T.axis.remap("SS", [rc_0, ry_0])
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(448))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 1, 64, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[16, 1, 1, 1, 7])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 56, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #22: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(8) * T.int64(2) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(51)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5673) // T.int64(1891))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1891) // T.int64(31))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(32) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(31))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(5673))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(8) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(8) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[4, 2, 2, 2, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[4, 2, 7, 1, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[7, 1, 8, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 112, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #23: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(224), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(8) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(56) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) * T.int64(8) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(351))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(56) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(351) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(4) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1053))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(56) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) * T.int64(8) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(56) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 1, 4, 2, 4])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 1, 7, 8, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[56, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 56, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #24: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(224), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(4) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(102)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5673) // T.int64(1891))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1891) // T.int64(31))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(32) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(31))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(5673))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(4) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[8, 2, 1, 4, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[4, 1, 7, 4, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[7, 2, 8, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 56, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #25: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
                         ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
                     ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/module.py", line 405, in evaluator
    blob = feval(*args)
           ^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc", line 881, in operator()
    DeviceAPI::Get(dev)->StreamSync(dev, nullptr);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248, in tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
    CUDA_CALL(cudaStreamSynchronize(static_cast<cudaStream_t>(stream)));
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: operator()
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc:881
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:248
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(128), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3_init * T.int64(4) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(137)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2223))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2223) // T.int64(117))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(117))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6669))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(147))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(147) // T.int64(49))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[4, 16, 1, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[16, 1, 7, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 49], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 49, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #26: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(8) * T.int64(2) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(17)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(3), ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5673) // T.int64(1891))
                                        v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(56) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1891) // T.int64(31))
                                        v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(32) + rx_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(31))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(5673))
                                        T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(336))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(8) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(8) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[4, 2, 2, 2, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[4, 2, 7, 1, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[7, 1, 8, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122, l123 = sch.split(loop=l120, factors=[None, 112, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l123)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b92)
l131, l132, l133 = sch.split(loop=l130, factors=[None, 112, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l133)
sch.bind(loop=l132, thread_axis="threadIdx.x")
b134 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b134, ann_key="meta_schedule.unroll_explicit")
b135, b136, b137, b138, b139 = sch.get_child_blocks(b134)
l140, l141, l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b135)
l149, l150, l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b136)
l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b137)
sch.annotate(block_or_loop=l158, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l158, ann_key="pragma_unroll_explicit", ann_val=1)
l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b138)
l185, l186, l187 = sch.get_loops(block=b139)
b188 = sch.get_block(name="conv2d_nchw", func_name="main")
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b188)
b209 = sch.decompose_reduction(block=b188, loop=l192)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #27: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(256), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(8) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(98)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5445) // T.int64(1815))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(8) * T.int64(56) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1815) // T.int64(33))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(33))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(5445))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), ry_0)
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(168))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(8) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(8) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[8, 1, 4, 2, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[4, 4, 7, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[8, 1, 2, 7, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 56, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #28: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1024), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3_init * T.int64(4) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(30)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(14) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1443) // T.int64(111))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(111))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1443))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1))
                                    v1, v2, v3 = T.axis.remap("SSS", [rc_0, ry_0, rx_0])
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[32, 2, 1, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[16, 1, 7, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 49], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 49], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #29: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(32) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(32) // T.int64(16) * T.int64(2) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(133)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(229))
                                    v3 = T.axis.spatial(T.int64(230), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(229))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(8473))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(392))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(32) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(32) // T.int64(16) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(32) // T.int64(16) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[8, 4, 2, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[7, 4, 2, 1, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 7, 16, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #30: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(14) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(202)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6435) // T.int64(55))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(56) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(55))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6435))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(3), rc_0)
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(224))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(14) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 4, 8, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 2, 2, 2, 7])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[4, 7, 2, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 32, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:131] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #31: GFLOPs: 33.8057. Time: 7100.6295 us. Best GFLOPs: 2293.8323
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:131] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #32: GFLOPs: 2875.9721. Time: 83.4646 us. Best GFLOPs: 2875.9721
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #33: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
                         ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
                     ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/module.py", line 405, in evaluator
    blob = feval(*args)
           ^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc", line 881, in operator()
    DeviceAPI::Get(dev)->StreamSync(dev, nullptr);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248, in tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
    CUDA_CALL(cudaStreamSynchronize(static_cast<cudaStream_t>(stream)));
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: operator()
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc:881
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:248
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(256), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(8) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(80)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4455) // T.int64(1485))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(8) * T.int64(56) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1485) // T.int64(27))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(28) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(27))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4455))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v2, v3 = T.axis.remap("SS", [ry_0, rx_0])
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(24))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(8) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(8) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[8, 1, 4, 2, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[4, 4, 7, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[8, 7, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 56, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #34: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(16) + ff_3_init * T.int64(16) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3_init * T.int64(4) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(14) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1521) // T.int64(117))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(117))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1521))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1, v2 = T.axis.remap("SS", [rc_0, ry_0])
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(224))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 16])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[16, 1, 7, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 49], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 49, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #35: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(108)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3435) // T.int64(229))
                                    v3 = T.axis.spatial(T.int64(230), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(229))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3435))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(7))
                                    v1, v2 = T.axis.remap("SS", [rc_0, ry_0])
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 1, 32, 2, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[14, 1, 1, 4, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 4, 1, 28, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) // T.int64(2) * T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(147), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(54)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0_ry_0_rx_0_fused // T.int64(49), T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(56) + rc_0_ry_0_rx_0_fused % T.int64(49) // T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1705) // T.int64(31))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(32) + rc_0_ry_0_rx_0_fused % T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(31))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1705))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                                    v1 = T.axis.spatial(T.int64(3), rc_0_ry_0_rx_0_fused // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) // T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0_ry_0_rx_0_fused // T.int64(49) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(49) // T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) // T.int64(2) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 8, 2, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[4, 4, 1, 7, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[7, 2, 4, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
l105 = sch.fuse(l60, l66, l72, preserve_unit_iters=True)
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v106 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v106)
l107, l108, l109, l110 = sch.get_loops(block=b7)
l111 = sch.fuse(l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113, l114 = sch.split(loop=l111, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l113, l114, l112)
sch.bind(loop=l113, thread_axis="blockIdx.x")
sch.bind(loop=l114, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l115, l116, l117, l118, l119 = sch.get_loops(block=b79)
l120, l121 = sch.split(loop=l119, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l121, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l122, l123, l124, l125, l126 = sch.get_loops(block=b92)
l127, l128 = sch.split(loop=l126, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l128, thread_axis="threadIdx.x")
b129 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b129, ann_key="meta_schedule.unroll_explicit")
b130, b131, b132, b133, b134 = sch.get_child_blocks(b129)
l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b130)
l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b131)
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b132)
sch.annotate(block_or_loop=l147, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l147, ann_key="pragma_unroll_explicit", ann_val=1)
l165, l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b133)
l172, l173, l174 = sch.get_loops(block=b134)
b175 = sch.get_block(name="conv2d_nchw", func_name="main")
l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191, l192, l193 = sch.get_loops(block=b175)
b194 = sch.decompose_reduction(block=b175, loop=l179)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #37: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(16) + ff_3_init * T.int64(16) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(56) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), rc_0_ry_0_rx_0_fused)
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(56) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(9))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(333))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(49))
                                        v1 = T.axis.spatial(T.int64(3), rc_0_ry_0_rx_0_fused)
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3136))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(56) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0_ry_0_rx_0_fused + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(56) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 16])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[7, 2, 8, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[56, 1, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
l105 = sch.fuse(l60, l66, l72, preserve_unit_iters=True)
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v106 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v106)
l107, l108, l109, l110 = sch.get_loops(block=b7)
l111 = sch.fuse(l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113, l114 = sch.split(loop=l111, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l113, l114, l112)
sch.bind(loop=l113, thread_axis="blockIdx.x")
sch.bind(loop=l114, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l115, l116, l117, l118, l119 = sch.get_loops(block=b79)
l120, l121 = sch.split(loop=l119, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l121, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l122, l123, l124, l125, l126 = sch.get_loops(block=b92)
l127, l128, l129 = sch.split(loop=l126, factors=[None, 32, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l129)
sch.bind(loop=l128, thread_axis="threadIdx.x")
b130 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b130, ann_key="meta_schedule.unroll_explicit")
b131, b132, b133, b134, b135 = sch.get_child_blocks(b130)
l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b131)
l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b132)
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b133)
sch.annotate(block_or_loop=l149, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l149, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b134)
l174, l175, l176 = sch.get_loops(block=b135)
b177 = sch.get_block(name="conv2d_nchw", func_name="main")
l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195 = sch.get_loops(block=b177)
b196 = sch.decompose_reduction(block=b177, loop=l181)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #38: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(8) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9477) // T.int64(3159))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3159) // T.int64(27))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(28) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) % T.int64(27))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 < T.int64(9477))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(3136) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(3136) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(3136) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(8) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(8), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 1, 16, 2, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 1, 7, 4, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[8, 1, 7, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 784], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 784, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #39: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(4) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(195)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(10881) // T.int64(3627))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3627) // T.int64(31))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(32) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(31))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(10881))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(4) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[4, 1, 4, 1, 4])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 1, 14, 4, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[7, 8, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 56, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #40: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
                         ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
                     ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/module.py", line 405, in evaluator
    blob = feval(*args)
           ^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc", line 881, in operator()
    DeviceAPI::Get(dev)->StreamSync(dev, nullptr);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248, in tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
    CUDA_CALL(cudaStreamSynchronize(static_cast<cudaStream_t>(stream)));
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: operator()
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc:881
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:248
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(128), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(64) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(64) // T.int64(8) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(31)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(3), ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(10323) // T.int64(3441))
                                        v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ry_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3441) // T.int64(111))
                                        v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + rx_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(111))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(10323))
                                        T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v2, v3 = T.axis.remap("SS", [ry_0, rx_0])
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(192))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(64) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(64) // T.int64(8) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(64) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(64) // T.int64(8) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 8, 4, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[7, 8, 2, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 8, 7, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122, l123 = sch.split(loop=l120, factors=[None, 112, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l123)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b92)
l131, l132, l133 = sch.split(loop=l130, factors=[None, 112, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l133)
sch.bind(loop=l132, thread_axis="threadIdx.x")
b134 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b134, ann_key="meta_schedule.unroll_explicit")
b135, b136, b137, b138, b139 = sch.get_child_blocks(b134)
l140, l141, l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b135)
l149, l150, l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b136)
l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b137)
sch.annotate(block_or_loop=l158, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l158, ann_key="pragma_unroll_explicit", ann_val=1)
l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b138)
l185, l186, l187 = sch.get_loops(block=b139)
b188 = sch.get_block(name="conv2d_nchw", func_name="main")
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b188)
b209 = sch.decompose_reduction(block=b188, loop=l192)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #41: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(448), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) // T.int64(8) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(7) * T.int64(14) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(22)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(448), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9477) // T.int64(3159))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) // T.int64(8) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3159) // T.int64(27))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(28) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) % T.int64(27))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 < T.int64(9477))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(448), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1792) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1792) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1792) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(672))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) // T.int64(8) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(7) * T.int64(14) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) // T.int64(8) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(7) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 1, 16, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 1, 4, 2, 7])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[8, 1, 7, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 448], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 448, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #42: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1024), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3_init * T.int64(4) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(137)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2223))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2223) // T.int64(117))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(117))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6669))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(147))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(147) // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[32, 2, 1, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[16, 1, 7, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 49], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 49], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #43: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(194)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6183) // T.int64(229))
                                    v3 = T.axis.spatial(T.int64(230), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(229))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6183))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(7))
                                    v1, v2 = T.axis.remap("SS", [rc_0, ry_0])
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 16, 2, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[8, 1, 1, 1, 14])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 56, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #44: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(61)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(112) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6771) // T.int64(61))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(61))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6771))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1, v2 = T.axis.remap("SS", [rc_0, ry_0])
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 8, 4, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 7, 2, 2, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[4, 2, 14, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 112, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #45: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(16) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) * T.int64(4) + yy_3_init * T.int64(4) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(15)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(3), rc_0)
                                        v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2457))
                                        T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(56)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 2, 8, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 4])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[14, 2, 2, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122, l123 = sch.split(loop=l120, factors=[None, 56, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l123)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b92)
l131, l132 = sch.split(loop=l130, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l132, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b134)
l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #46: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
                         ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
                     ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/module.py", line 405, in evaluator
    blob = feval(*args)
           ^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc", line 881, in operator()
    DeviceAPI::Get(dev)->StreamSync(dev, nullptr);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248, in tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
    CUDA_CALL(cudaStreamSynchronize(static_cast<cudaStream_t>(stream)));
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: operator()
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc:881
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:248
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(189)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6021) // T.int64(223))
                                    v3 = T.axis.spatial(T.int64(230), rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(223))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6021))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2)
                                        v1, v2, v3 = T.axis.remap("SSS", [rc_0, ry_0, rx_0])
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 4, 16, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[8, 1, 1, 1, 14])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 56, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 32, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #47: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1024), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3_init * T.int64(4) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(3), ((ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4563) // T.int64(1521))
                                        v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(14) + ry_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1521) // T.int64(117))
                                        v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(117))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4563))
                                        T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(21))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(21) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), ry_0)
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1 < T.int64(42))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(32) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(32) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[32, 2, 1, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[16, 1, 7, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122, l123 = sch.split(loop=l120, factors=[None, 49, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l123)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b92)
l131, l132 = sch.split(loop=l130, factors=[None, 49], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l132, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b134)
l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #48: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(28) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4683) // T.int64(1561))
                                    v2 = T.axis.spatial(T.int64(230), ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1561) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4683))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v2, v3 = T.axis.remap("SS", [ry_0, rx_0])
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(192))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(28) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 16, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[1, 1, 4, 2, 14])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[28, 1, 4, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 256], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 256, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #49: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(448), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) // T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(4) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(9)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(448), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) // T.int64(2) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) // T.int64(117))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) % T.int64(117))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3861))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(448), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) // T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(4) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(16) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(16) // T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[4, 1, 8, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[8, 1, 14, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 2, 4, 7, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 448], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 448], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #50: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(8) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(112) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2997) // T.int64(27))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(28) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(27))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2997))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1)
                                    v1, v2, v3 = T.axis.remap("SSS", [rc_0, ry_0, rx_0])
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(64))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 1, 8, 4, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 4, 7, 1, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[8, 1, 7, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 392], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 392], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l154, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l154, ann_key="pragma_unroll_explicit", ann_val=1)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #51: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(17)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(3), ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5673) // T.int64(1891))
                                        v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(56) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1891) // T.int64(31))
                                        v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(32) + rx_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(31))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(5673))
                                        T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), rx_0)
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 1, 1, 32, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[4, 1, 28, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[7, 4, 4, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122, l123 = sch.split(loop=l120, factors=[None, 112, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l123)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b92)
l131, l132, l133 = sch.split(loop=l130, factors=[None, 112, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l133)
sch.bind(loop=l132, thread_axis="threadIdx.x")
b134 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b134, ann_key="meta_schedule.unroll_explicit")
b135, b136, b137, b138, b139 = sch.get_child_blocks(b134)
l140, l141, l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b135)
l149, l150, l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b136)
l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b137)
sch.annotate(block_or_loop=l158, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l158, ann_key="pragma_unroll_explicit", ann_val=1)
l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b138)
l185, l186, l187 = sch.get_loops(block=b139)
b188 = sch.get_block(name="conv2d_nchw", func_name="main")
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b188)
b209 = sch.decompose_reduction(block=b188, loop=l192)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:131] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #52: GFLOPs: 338.0797. Time: 710.0160 us. Best GFLOPs: 2875.9721
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:131] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #53: GFLOPs: 82.2200. Time: 2919.5093 us. Best GFLOPs: 2875.9721
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:131] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #54: GFLOPs: 2434.7341. Time: 98.5906 us. Best GFLOPs: 2875.9721
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:131] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #55: GFLOPs: 1132.9554. Time: 211.8724 us. Best GFLOPs: 2875.9721
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #56: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
                         ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
                     ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/module.py", line 405, in evaluator
    blob = feval(*args)
           ^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc", line 881, in operator()
    DeviceAPI::Get(dev)->StreamSync(dev, nullptr);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248, in tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
    CUDA_CALL(cudaStreamSynchronize(static_cast<cudaStream_t>(stream)));
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: operator()
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc:881
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:248
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + xx_3_init * T.int64(4) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(75)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(3), rc_0)
                                        v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(61))
                                        v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(61))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(7137))
                                        T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(49))
                                        v1 = T.axis.spatial(T.int64(3), rc_0)
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + xx_3 * T.int64(4) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(28)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 2, 4, 7, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[4, 1, 1, 7, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122, l123 = sch.split(loop=l120, factors=[None, 32, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l123)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b92)
l131, l132, l133 = sch.split(loop=l130, factors=[None, 32, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l133)
sch.bind(loop=l132, thread_axis="threadIdx.x")
b134 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b134, ann_key="meta_schedule.unroll_explicit")
b135, b136, b137, b138, b139 = sch.get_child_blocks(b134)
l140, l141, l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b135)
l149, l150, l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b136)
l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b137)
sch.annotate(block_or_loop=l158, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l158, ann_key="pragma_unroll_explicit", ann_val=1)
l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b138)
l185, l186, l187 = sch.get_loops(block=b139)
b188 = sch.get_block(name="conv2d_nchw", func_name="main")
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b188)
b209 = sch.decompose_reduction(block=b188, loop=l192)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #57: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + yy_3_init * T.int64(4) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + xx_3_init * T.int64(14) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(26)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(8) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(819) // T.int64(117))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(117))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(819))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1, v2 = T.axis.remap("SS", [rc_0, ry_0])
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + xx_3 * T.int64(14) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(14)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 16, 2, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 4])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 2, 2, 1, 14])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 32, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #58: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(28) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(34)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2899))
                                    v2 = T.axis.spatial(T.int64(230), ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2899) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(8697))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(768) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(768) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), ry_0)
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(768) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(28) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 16, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[1, 1, 4, 2, 14])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[28, 1, 4, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 256], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 256, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #59: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(196) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(196) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(21), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0_ry_0_rx_0_fused // T.int64(7), T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(196) // T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(403) // T.int64(31))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(32) + rc_0_ry_0_rx_0_fused % T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(31))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(403))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(196) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(7))
                                    v1 = T.axis.spatial(T.int64(3), rc_0_ry_0_rx_0_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(196) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(196) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0_ry_0_rx_0_fused // T.int64(7) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(196) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(196) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 1, 8, 4, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[28, 4, 1, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[7, 2, 4, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
l105 = sch.fuse(l60, l66, l72, preserve_unit_iters=True)
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v106 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v106)
l107, l108, l109, l110 = sch.get_loops(block=b7)
l111 = sch.fuse(l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113, l114 = sch.split(loop=l111, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l113, l114, l112)
sch.bind(loop=l113, thread_axis="blockIdx.x")
sch.bind(loop=l114, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l115, l116, l117, l118, l119 = sch.get_loops(block=b79)
l120, l121 = sch.split(loop=l119, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l121, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l122, l123, l124, l125, l126 = sch.get_loops(block=b92)
l127, l128 = sch.split(loop=l126, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l128, thread_axis="threadIdx.x")
b129 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b129, ann_key="meta_schedule.unroll_explicit")
b130, b131, b132, b133, b134 = sch.get_child_blocks(b129)
l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b130)
l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b131)
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b132)
sch.annotate(block_or_loop=l147, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l147, ann_key="pragma_unroll_explicit", ann_val=1)
l165, l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b133)
l172, l173, l174 = sch.get_loops(block=b134)
b175 = sch.get_block(name="conv2d_nchw", func_name="main")
l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191, l192, l193 = sch.get_loops(block=b175)
b194 = sch.decompose_reduction(block=b175, loop=l179)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #60: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(56) * T.int64(14) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(23)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(729) // T.int64(243))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(56) * T.int64(28) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(243) // T.int64(9))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(729))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(21))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), ry_0)
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(56) * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(56) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(56) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 4, 16, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[8, 1, 1, 1, 14])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[56, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 32], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 32, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #61: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(64), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(8) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(31)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(3), ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(10323) // T.int64(3441))
                                        v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ry_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3441) // T.int64(111))
                                        v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + rx_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(111))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(10323))
                                        T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v2, v3 = T.axis.remap("SS", [ry_0, rx_0])
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(192))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(8) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 1, 8, 8, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[7, 8, 2, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[2, 8, 7, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122, l123 = sch.split(loop=l120, factors=[None, 112, 3], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l123)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b92)
l131, l132 = sch.split(loop=l130, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l132, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b134)
l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #62: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
                         ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
                     ^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/module.py", line 405, in evaluator
    blob = feval(*args)
           ^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc", line 881, in operator()
    DeviceAPI::Get(dev)->StreamSync(dev, nullptr);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248, in tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
    CUDA_CALL(cudaStreamSynchronize(static_cast<cudaStream_t>(stream)));
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: operator()
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/profiling.cc:881
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:248
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 248
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(8) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8991) // T.int64(2997))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(112) + ry_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2997) // T.int64(27))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(28) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) % T.int64(27))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 < T.int64(8991))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(3136) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(3136) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v2, v3 = T.axis.remap("SS", [ry_0, rx_0])
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(192))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(8) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(2)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 16, 2, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 1, 7, 4, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[8, 1, 7, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 784], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 784, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #63: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + ff_3_init * T.int64(32) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(128)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(61))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(61))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(7137))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p_conv1_weight_shared"):
                                        v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(49))
                                        v1 = T.axis.spatial(T.int64(3), rc_0)
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.reads(p_conv1_weight[v0, v1, v2, v3])
                                        T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                        p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(4) * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 32])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 1, 56, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[4, 4, 1, 7, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 56], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131, l132 = sch.split(loop=l129, factors=[None, 56, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l132)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b133 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b133, ann_key="meta_schedule.unroll_explicit")
b134, b135, b136, b137, b138 = sch.get_child_blocks(b133)
l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b134)
l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b135)
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b136)
l176, l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b137)
l183, l184, l185 = sch.get_loops(block=b138)
b186 = sch.get_block(name="conv2d_nchw", func_name="main")
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b186)
b207 = sch.decompose_reduction(block=b186, loop=l190)
2025-05-29 13:59:18 [INFO] [task_scheduler.cc:121] [Task #2: fused_conv2d_subtract_divide_expand_dims_multiply_expand_dims_add1_relu] Trial #64: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
                                           ^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/runtime/ndarray.py", line 444, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "tvm/_ffi/_cython/./packed_func.pxi", line 339, in tvm._ffi._cy3.core.PackedFuncBase.__call__
  File "tvm/_ffi/_cython/./packed_func.pxi", line 284, in tvm._ffi._cy3.core.FuncCall
  File "tvm/_ffi/_cython/./base.pxi", line 185, in tvm._ffi._cy3.core.CHECK_CALL
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/python/tvm/_ffi/base.py", line 468, in raise_last_ffi_error
    raise py_err
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc", line 241, in tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
    ->AllocDataSpace(ret->device, shape.size(), shape.data(), ret->dtype, mem_scope);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144, in tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
    CUDA_CALL(cudaMemGetInfo(&free_mem, &total_mem));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/ndarray.cc:241
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
        at /home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc:144
  File "/home/hayeon/workspace/TVM/v0.20.0/tvm/src/runtime/cuda/cuda_device_api.cc", line 144
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(x: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p_conv1_weight: T.Buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), p_bn1_weight: T.Buffer((T.int64(64),), "float32"), p_bn1_bias: T.Buffer((T.int64(64),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)))
        conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(230), T.int64(230)), scope="shared")
        p_conv1_weight_shared = T.alloc_buffer((T.int64(64), T.int64(3), T.int64(7), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(4) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + xx_3_init * T.int64(7) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(51)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), T.Add(rc_0, T.int64(0)))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6435) // T.int64(55))
                                    v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(56) + rx_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(55))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6435))
                                    T.reads(x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(227) and T.int64(3) <= v3 and v3 < T.int64(227), x[v0, v1, v2 - T.int64(3), v3 - T.int64(3)], T.float32(0.0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("p_conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(7))
                                    v1 = T.axis.spatial(T.int64(3), rc_0)
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), rx_0)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 < T.int64(448))
                                    T.reads(p_conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_conv1_weight_shared[v0, v1, v2, v3])
                                    p_conv1_weight_shared[v0, v1, v2, v3] = p_conv1_weight[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(4) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(7)):
                        with T.block("conv2d_nchw_intermediate_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                            conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_bn1_weight[v_ax1], p_bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_bn1_weight[v_ax1] + p_bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 2, 16, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 7, 2, 4, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[4, 1, 4, 1, 7])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122 = sch.split(loop=l120, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b92)
l130, l131 = sch.split(loop=l129, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l131, thread_axis="threadIdx.x")
b132 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b132, ann_key="meta_schedule.unroll_explicit")
b133, b134, b135, b136, b137 = sch.get_child_blocks(b132)
l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b133)
l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b134)
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b135)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b136)
l181, l182, l183 = sch.get_loops(block=b137)
b184 = sch.get_block(name="conv2d_nchw", func_name="main")
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b184)
b205 = sch.decompose_reduction(block=b184, loop=l188)
