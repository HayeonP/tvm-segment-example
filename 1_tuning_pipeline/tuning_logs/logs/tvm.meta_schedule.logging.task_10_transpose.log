2025-05-29 13:56:37 [INFO] [task_scheduler.cc:162] Initializing Task #10: "transpose"
2025-05-29 13:56:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p_fc_weight: T.Buffer((T.int64(1000), T.int64(512)), "float32"), T_transpose: T.Buffer((T.int64(512), T.int64(1000)), "float32")):
        T.func_attr({"op_pattern": 2, "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1 in T.grid(T.int64(512), T.int64(1000)):
            with T.block("T_transpose"):
                v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                T.reads(p_fc_weight[v_ax1, v_ax0])
                T.writes(T_transpose[v_ax0, v_ax1])
                T_transpose[v_ax0, v_ax1] = p_fc_weight[v_ax1, v_ax0]
2025-05-29 13:56:37 [INFO] [task_scheduler.cc:166] Total 1 design space(s) generated
2025-05-29 13:56:37 [INFO] [task_scheduler.cc:173] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p_fc_weight: T.Buffer((T.int64(1000), T.int64(512)), "float32"), T_transpose: T.Buffer((T.int64(512), T.int64(1000)), "float32")):
        T.func_attr({"op_pattern": 2, "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_fused_0 in range(T.int64(2)):
                    with T.block("T_transpose"):
                        v_ax0 = T.axis.spatial(T.int64(512), (ax0_ax1_fused_0 * T.int64(262144) + ax0_ax1_fused_1 * T.int64(1024) + ax0_ax1_fused_2) // T.int64(1000))
                        v_ax1 = T.axis.spatial(T.int64(1000), (ax0_ax1_fused_0 * T.int64(262144) + ax0_ax1_fused_1 * T.int64(1024) + ax0_ax1_fused_2) % T.int64(1000))
                        T.where((ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1) * T.int64(1024) + ax0_ax1_fused_2 < T.int64(512000))
                        T.reads(p_fc_weight[v_ax1, v_ax0])
                        T.writes(T_transpose[v_ax0, v_ax1])
                        T_transpose[v_ax0, v_ax1] = p_fc_weight[v_ax1, v_ax0]
b0 = sch.get_block(name="T_transpose", func_name="main")
l1, l2 = sch.get_loops(block=b0)
l3 = sch.fuse(l1, l2, preserve_unit_iters=True)
l4, l5, l6 = sch.split(loop=l3, factors=[None, 256, 1024], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l5, l6, l4)
sch.bind(loop=l5, thread_axis="blockIdx.x")
sch.bind(loop=l6, thread_axis="threadIdx.x")
