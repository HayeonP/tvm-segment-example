2025-05-29 13:56:35 [INFO] [task_scheduler.cc:162] Initializing Task #4: "fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4"
2025-05-29 13:56:35 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv64: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14)), "float32"), p_getattr_l__self___layer4___0___conv1_weight: T.Buffer((T.int64(512), T.int64(256), T.int64(3), T.int64(3)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), p_getattr_l__self___layer4___0___bn1_weight: T.Buffer((T.int64(512),), "float32"), p_getattr_l__self___layer4___0___bn1_bias: T.Buffer((T.int64(512),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(16), T.int64(16)))
        conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
        T_subtract_intermediate = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
        T_divide_intermediate = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
        expand_dims_intermediate = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)))
        T_multiply_intermediate = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
        expand_dims_intermediate_1 = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)))
        T_add_intermediate = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(16), T.int64(16)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(lv64[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), lv64[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0.0))
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7), T.int64(256), T.int64(3), T.int64(3)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_getattr_l__self___layer4___0___conv1_weight[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw_intermediate[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw_intermediate[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                conv2d_nchw_intermediate[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_getattr_l__self___layer4___0___conv1_weight[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7)):
            with T.block("T_subtract"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_subtract_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                T_subtract_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7)):
            with T.block("T_divide"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_subtract_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_divide_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                T_divide_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T_subtract_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("expand_dims"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p_getattr_l__self___layer4___0___bn1_weight[v_i1])
                T.writes(expand_dims_intermediate[v_i0, v_i1, v_i2, v_i3])
                expand_dims_intermediate[v_i0, v_i1, v_i2, v_i3] = p_getattr_l__self___layer4___0___bn1_weight[v_i1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_divide_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], expand_dims_intermediate[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T_divide_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] * expand_dims_intermediate[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("expand_dims_1"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p_getattr_l__self___layer4___0___bn1_bias[v_i1])
                T.writes(expand_dims_intermediate_1[v_i0, v_i1, v_i2, v_i3])
                expand_dims_intermediate_1[v_i0, v_i1, v_i2, v_i3] = p_getattr_l__self___layer4___0___bn1_bias[v_i1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], expand_dims_intermediate_1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] + expand_dims_intermediate_1[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(T_add_intermediate[v_i0, v_i1, v_i2, v_i3])
                T.writes(compute_intermediate[v_i0, v_i1, v_i2, v_i3])
                compute_intermediate[v_i0, v_i1, v_i2, v_i3] = T.max(T_add_intermediate[v_i0, v_i1, v_i2, v_i3], T.float32(0.0))
2025-05-29 13:56:35 [INFO] [task_scheduler.cc:166] Total 3 design space(s) generated
2025-05-29 13:56:35 [INFO] [task_scheduler.cc:173] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv64: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14)), "float32"), p_getattr_l__self___layer4___0___conv1_weight: T.Buffer((T.int64(512), T.int64(256), T.int64(3), T.int64(3)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), p_getattr_l__self___layer4___0___bn1_weight: T.Buffer((T.int64(512),), "float32"), p_getattr_l__self___layer4___0___bn1_bias: T.Buffer((T.int64(512),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
            conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(16), T.int64(16)), scope="shared")
            p_getattr_l__self___layer4___0___conv1_weight_shared = T.alloc_buffer((T.int64(512), T.int64(256), T.int64(3), T.int64(3)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(392), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(3), T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(21632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused // T.int64(169))
                                    v2 = T.axis.spatial(T.int64(16), ry_0 + ax0_ax1_ax2_ax3_fused % T.int64(169) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(16), rx_0 + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(lv64[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), lv64[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0.0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p_getattr_l__self___layer4___0___conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(256) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    v2, v3 = T.axis.remap("SS", [ry_0, rx_0])
                                    T.reads(p_getattr_l__self___layer4___0___conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_getattr_l__self___layer4___0___conv1_weight_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p_getattr_l__self___layer4___0___conv1_weight_shared[v0, v1, v2, v3] = p_getattr_l__self___layer4___0___conv1_weight[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(256) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(128) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(3), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(3), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_getattr_l__self___layer4___0___conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                                    conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_getattr_l__self___layer4___0___conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_intermediate_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(256) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                                conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                        v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                        v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_getattr_l__self___layer4___0___bn1_weight[v_ax1], p_getattr_l__self___layer4___0___bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_getattr_l__self___layer4___0___bn1_weight[v_ax1] + p_getattr_l__self___layer4___0___bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 8, 16, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[2, 16, 8])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
v111 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l112, l113 = sch.split(loop=l110, factors=[None, v111], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
2025-05-29 13:56:35 [INFO] [task_scheduler.cc:173] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv64: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14)), "float32"), p_getattr_l__self___layer4___0___conv1_weight: T.Buffer((T.int64(512), T.int64(256), T.int64(3), T.int64(3)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), p_getattr_l__self___layer4___0___bn1_weight: T.Buffer((T.int64(512),), "float32"), p_getattr_l__self___layer4___0___bn1_bias: T.Buffer((T.int64(512),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
            conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(16), T.int64(16)), scope="shared")
            p_getattr_l__self___layer4___0___conv1_weight_shared = T.alloc_buffer((T.int64(512), T.int64(256), T.int64(3), T.int64(3)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(392), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(18), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(21632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused // T.int64(9) * T.int64(128) + ax0_ax1_ax2_ax3_fused // T.int64(169))
                                    v2 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused % T.int64(9) // T.int64(3) + ax0_ax1_ax2_ax3_fused % T.int64(169) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused % T.int64(3) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(lv64[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), lv64[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0.0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p_getattr_l__self___layer4___0___conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(256) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused // T.int64(9) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    v2 = T.axis.spatial(T.int64(3), rc_0_ry_0_rx_0_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), rc_0_ry_0_rx_0_fused % T.int64(3))
                                    T.reads(p_getattr_l__self___layer4___0___conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_getattr_l__self___layer4___0___conv1_weight_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p_getattr_l__self___layer4___0___conv1_weight_shared[v0, v1, v2, v3] = p_getattr_l__self___layer4___0___conv1_weight[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(256) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused // T.int64(9) * T.int64(128) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(3), rc_0_ry_0_rx_0_fused % T.int64(9) // T.int64(3) + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(3), rc_0_ry_0_rx_0_fused % T.int64(3) + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_getattr_l__self___layer4___0___conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                                    conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_getattr_l__self___layer4___0___conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_intermediate_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(256) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                                conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                        v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                        v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(25088))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_getattr_l__self___layer4___0___bn1_weight[v_ax1], p_getattr_l__self___layer4___0___bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_getattr_l__self___layer4___0___bn1_weight[v_ax1] + p_getattr_l__self___layer4___0___bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 8, 16, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[2, 16, 8])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
l105 = sch.fuse(l60, l66, l72, preserve_unit_iters=True)
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v106 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v106)
l107, l108, l109, l110 = sch.get_loops(block=b7)
l111 = sch.fuse(l107, l108, l109, l110, preserve_unit_iters=True)
v112 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l113, l114 = sch.split(loop=l111, factors=[None, v112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l113, thread_axis="blockIdx.x")
sch.bind(loop=l114, thread_axis="threadIdx.x")
2025-05-29 13:56:35 [INFO] [task_scheduler.cc:173] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(lv64: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14)), "float32"), p_getattr_l__self___layer4___0___conv1_weight: T.Buffer((T.int64(512), T.int64(256), T.int64(3), T.int64(3)), "float32"), param_0: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), param_1: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), p_getattr_l__self___layer4___0___bn1_weight: T.Buffer((T.int64(512),), "float32"), p_getattr_l__self___layer4___0___bn1_bias: T.Buffer((T.int64(512),), "float32"), compute_intermediate: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_intermediate = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
            conv2d_nchw_intermediate_local = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(16), T.int64(16)), scope="shared")
            p_getattr_l__self___layer4___0___conv1_weight_shared = T.alloc_buffer((T.int64(512), T.int64(256), T.int64(3), T.int64(3)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(392), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(18), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(21632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused // T.int64(9) * T.int64(128) + ax0_ax1_ax2_ax3_fused // T.int64(169))
                                    v2 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused % T.int64(9) // T.int64(3) + ax0_ax1_ax2_ax3_fused % T.int64(169) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused % T.int64(3) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(lv64[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), lv64[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0.0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p_getattr_l__self___layer4___0___conv1_weight_shared"):
                                    v0 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(256) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused // T.int64(9) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    v2 = T.axis.spatial(T.int64(3), rc_0_ry_0_rx_0_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), rc_0_ry_0_rx_0_fused % T.int64(3))
                                    T.reads(p_getattr_l__self___layer4___0___conv1_weight[v0, v1, v2, v3])
                                    T.writes(p_getattr_l__self___layer4___0___conv1_weight_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p_getattr_l__self___layer4___0___conv1_weight_shared[v0, v1, v2, v3] = p_getattr_l__self___layer4___0___conv1_weight[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(256) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused // T.int64(9) * T.int64(128) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(3), rc_0_ry_0_rx_0_fused % T.int64(9) // T.int64(3) + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(3), rc_0_ry_0_rx_0_fused % T.int64(3) + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p_getattr_l__self___layer4___0___conv1_weight_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0.0)
                                    conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_intermediate_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p_getattr_l__self___layer4___0___conv1_weight_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_intermediate_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(256) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(7), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_intermediate_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw_intermediate[v0, v1, v2, v3])
                                conv2d_nchw_intermediate[v0, v1, v2, v3] = conv2d_nchw_intermediate_local[v0, v1, v2, v3]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                        v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                        v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                        T.reads(conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3], param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)], param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)], p_getattr_l__self___layer4___0___bn1_weight[v_ax1], p_getattr_l__self___layer4___0___bn1_bias[v_ax1])
                        T.writes(compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3])
                        compute_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nchw_intermediate[v_ax0, v_ax1, v_ax2, v_ax3] - param_0[v_ax0, v_ax1, T.int64(0), T.int64(0)]) / param_1[v_ax0, v_ax1, T.int64(0), T.int64(0)] * p_getattr_l__self___layer4___0___bn1_weight[v_ax1] + p_getattr_l__self___layer4___0___bn1_bias[v_ax1], T.float32(0.0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_subtract", func_name="main")
b3 = sch.get_block(name="T_divide", func_name="main")
b4 = sch.get_block(name="expand_dims", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add", func_name="main")
b8 = sch.get_block(name="compute", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True, disable_predication=False)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[2, 8, 16, 1, 2])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True, disable_predication=False)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[2, 16, 8])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True, disable_predication=False)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
l105 = sch.fuse(l60, l66, l72, preserve_unit_iters=True)
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l105, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v106 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v106)
l107, l108, l109, l110 = sch.get_loops(block=b7)
l111 = sch.fuse(l107, l108, l109, l110, preserve_unit_iters=True)
v112 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l113, l114 = sch.split(loop=l111, factors=[None, v112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l113, thread_axis="blockIdx.x")
sch.bind(loop=l114, thread_axis="threadIdx.x")
2025-05-29 13:59:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-05-29 13:59:41 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-05-29 13:59:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1ff83f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21dae338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219b5d48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21a6c318)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217f0fe8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21e7c488)]: 496 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21dfe798)]: 0 failure(s)
2025-05-29 13:59:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1ff83f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21dae338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219b5d48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21a6c318)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217f0fe8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21e7c488)]: 997 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21dfe798)]: 0 failure(s)
2025-05-29 13:59:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1ff83f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21dae338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219b5d48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21a6c318)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217f0fe8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21e7c488)]: 1499 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21dfe798)]: 0 failure(s)
2025-05-29 13:59:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1ff83f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21dae338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219b5d48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21a6c318)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217f0fe8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21e7c488)]: 1994 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21dfe798)]: 0 failure(s)
2025-05-29 13:59:57 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2025-05-29 14:00:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1ff83f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21dae338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219b5d48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21a6c318)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217f0fe8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21e7c488)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21dfe798)]: 0 failure(s)
2025-05-29 14:00:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1ff83f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21dae338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219b5d48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21a6c318)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217f0fe8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21e7c488)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21dfe798)]: 0 failure(s)
2025-05-29 14:00:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1ff83f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21dae338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219b5d48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21a6c318)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217f0fe8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21e7c488)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21dfe798)]: 0 failure(s)
2025-05-29 14:00:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1ff83f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x21dae338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x219b5d48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x21a6c318)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x217f0fe8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x21e7c488)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x21dfe798)]: 0 failure(s)
2025-05-29 14:00:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.2824  2.2824  2.2824  2.2824  2.2824  2.2824  2.2824  2.2807  2.2807  2.2494  2.2494  2.2494  2.2494  2.2426  2.2426  2.2426
[17 : 32]:	2.2426  2.2426  2.2426  2.2426  2.1517  2.1517  2.1517  2.1517  2.1517  2.1517  2.1517  2.1517  2.1517  2.1517  2.1517  2.1517
[33 : 48]:	2.1517  2.1500  2.1187  2.1187  2.1187  2.1187  2.0868  2.0868  2.0868  2.0868  2.0868  2.0436  2.0436  2.0436  2.0436  2.0436
[49 : 64]:	2.0436  2.0436  2.0436  2.0436  2.0436  2.0436  2.0436  2.0436  2.0436  2.0436  2.0436  2.0436  2.0436  2.0436  2.0436  2.0436
2025-05-29 14:00:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-05-29 14:00:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #1: GFLOPs: 877.2955. Time: 131.9179 us. Best GFLOPs: 877.2955
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #2: GFLOPs: 809.9010. Time: 142.8952 us. Best GFLOPs: 877.2955
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #3: GFLOPs: 940.0032. Time: 123.1176 us. Best GFLOPs: 940.0032
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #4: GFLOPs: 993.6005. Time: 116.4763 us. Best GFLOPs: 993.6005
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #5: GFLOPs: 247.3827. Time: 467.8216 us. Best GFLOPs: 993.6005
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #6: GFLOPs: 835.8041. Time: 138.4666 us. Best GFLOPs: 993.6005
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #7: GFLOPs: 994.1700. Time: 116.4096 us. Best GFLOPs: 994.1700
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #8: GFLOPs: 1185.9257. Time: 97.5870 us. Best GFLOPs: 1185.9257
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #9: GFLOPs: 1130.0713. Time: 102.4103 us. Best GFLOPs: 1185.9257
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #10: GFLOPs: 806.9503. Time: 143.4177 us. Best GFLOPs: 1185.9257
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #11: GFLOPs: 967.6280. Time: 119.6027 us. Best GFLOPs: 1185.9257
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #12: GFLOPs: 770.3349. Time: 150.2346 us. Best GFLOPs: 1185.9257
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #13: GFLOPs: 616.8074. Time: 187.6290 us. Best GFLOPs: 1185.9257
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #14: GFLOPs: 1091.9782. Time: 105.9828 us. Best GFLOPs: 1185.9257
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #15: GFLOPs: 1170.8935. Time: 98.8399 us. Best GFLOPs: 1185.9257
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #16: GFLOPs: 1189.8759. Time: 97.2630 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #17: GFLOPs: 1148.1201. Time: 100.8004 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #18: GFLOPs: 1120.6667. Time: 103.2697 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #19: GFLOPs: 1182.6461. Time: 97.8576 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #20: GFLOPs: 617.0821. Time: 187.5455 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #21: GFLOPs: 878.8170. Time: 131.6895 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #22: GFLOPs: 337.7786. Time: 342.6237 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #23: GFLOPs: 908.6772. Time: 127.3620 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #24: GFLOPs: 827.8624. Time: 139.7949 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #25: GFLOPs: 808.8831. Time: 143.0750 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #26: GFLOPs: 493.8688. Time: 234.3354 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #27: GFLOPs: 554.0628. Time: 208.8769 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #28: GFLOPs: 805.6169. Time: 143.6551 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #29: GFLOPs: 788.9854. Time: 146.6832 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #30: GFLOPs: 729.8975. Time: 158.5578 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #31: GFLOPs: 647.6350. Time: 178.6978 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #32: GFLOPs: 1007.5994. Time: 114.8581 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #33: GFLOPs: 792.3548. Time: 146.0595 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #34: GFLOPs: 1041.7958. Time: 111.0879 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #35: GFLOPs: 1016.6259. Time: 113.8383 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #36: GFLOPs: 578.2488. Time: 200.1404 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #37: GFLOPs: 992.9379. Time: 116.5541 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #38: GFLOPs: 683.0635. Time: 169.4293 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #39: GFLOPs: 1062.9479. Time: 108.8773 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #40: GFLOPs: 1062.5645. Time: 108.9166 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #41: GFLOPs: 984.6635. Time: 117.5335 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #42: GFLOPs: 1059.8879. Time: 109.1917 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #43: GFLOPs: 670.2600. Time: 172.6657 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #44: GFLOPs: 1132.4567. Time: 102.1946 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #45: GFLOPs: 682.1635. Time: 169.6528 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #46: GFLOPs: 985.0541. Time: 117.4869 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #47: GFLOPs: 978.3634. Time: 118.2903 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #48: GFLOPs: 887.0105. Time: 130.4730 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #49: GFLOPs: 1062.5751. Time: 108.9155 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #50: GFLOPs: 738.9500. Time: 156.6154 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #51: GFLOPs: 1036.8774. Time: 111.6149 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #52: GFLOPs: 975.9091. Time: 118.5878 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #53: GFLOPs: 1124.0686. Time: 102.9572 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #54: GFLOPs: 1172.2902. Time: 98.7221 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #55: GFLOPs: 666.7988. Time: 173.5620 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #56: GFLOPs: 1032.3594. Time: 112.1034 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #57: GFLOPs: 1029.1182. Time: 112.4564 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #58: GFLOPs: 1083.6228. Time: 106.8000 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #59: GFLOPs: 1150.2566. Time: 100.6132 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #60: GFLOPs: 986.6674. Time: 117.2948 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #61: GFLOPs: 1129.9598. Time: 102.4204 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #62: GFLOPs: 101.6835. Time: 1138.1490 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #63: GFLOPs: 392.6941. Time: 294.7101 us. Best GFLOPs: 1189.8759
2025-05-29 14:01:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_conv2d8_subtract4_divide4_expand_dims3_multiply4_expand_dims3_add11_relu4] Trial #64: GFLOPs: 906.5138. Time: 127.6659 us. Best GFLOPs: 1189.8759
